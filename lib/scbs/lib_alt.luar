// Added earlier than 27 Aug 2024
// by reglnk

require "scbs/fs";

scbs = scbs or {};
scbs.lib = {};
local lib = scbs.lib;
local fs = scbs.fs;

lib.any = {shared = 1, static = 1};

// This is only for MinGW and Unix toolchains so far
// @todo macos

// whether this file may be used for linking with shared library
// in Unix this is the .so itself
// in MinGW this is .dll.a
fn lib.isSharedLink(filename, ctx)
{
	ctx = ctx or scbs
	if (ctx.OS ~= "win32")
		return filename:sub(-3, -1) == ".so";
	return filename:sub(-6, -1) == ".dll.a";
}

fn lib.isShared(filename, ctx)
{
	ctx = ctx or scbs
	if (ctx.OS ~= "win32")
		return file:sub(-3, -1) == ".so";
	return file:sub(-4, -1) == ".dll";
}

fn lib.isStaticLink(filename) {
	return filename:sub(-2, -1) == ".a";
}

// `types` is a table with integer keys.
// if types.shared then the shared lib is suitable
// if types.static then the static is suitable
// if some of them is more preferred, assign them different integer values, like this
// {shared = 2, static = 1}
// by default, the shared one is preferred.
// if name has regexes, the behaviour is undefined.
// @todo lib.findraw which finds both
fn lib.find(path, name, types, required)
{
	types = types or lib.any;
	types = type(types) == "table" and types or {types};
	required = required ~= nil and required or true;
	local shared, static;
	local filter = fn(file)
	{
		local ok = false;
		if (!file:find(name)) {
			scbs:debugprint("filename `".. file .."' doesn't match `".. name .."'");
			return false;
		}
		if (types.shared and lib.isSharedLink(file)) {
			shared = file;
			scbs:vprint("found shared library ".. file .." at `".. path .."'");
			return true;
		}
		if (types.static and lib.isStaticLink(file)) {
			static = file;
			scbs:vprint("found static library ".. file .." at `".. path .."'");
			return true;
		}
		return false;
	};
	scbs:debugprint("searching for library `".. name .."' at `".. path .."'");
	local fil = fs.find(path, filter);
	assert(#fil <= 2);
	assert(shared ~= static);
	scbs:debugprint("found ".. #fil .." libs at `".. path .."'");
	
	local sel;
	if (!types.static) sel = shared;
	else if (!types.shared) sel = static;
	else if (#fil == 1) sel = static or shared;
	else sel = (types.static > types.shared) and static or shared;
	
	if (sel == shared)
		scbs:vprint("selected shared library `".. sel .."'");
	else if (sel == static)
		scbs:vprint("selected static library `".. sel .."'");
	else {
		assert(not sel);
		if (required)
			scbs:error("library `".. name .."' is not found at path: `".. path .."'");
	}
	return sel;
}
